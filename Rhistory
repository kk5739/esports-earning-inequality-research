#1. merges the training and test sets to create
#one data set
#first read the data and assign column names for joining
features <- read.table("./UCI HAR Dataset/features.txt",
col.names = c("n", "functions"))
activities <- read.table("./UCI HAR Dataset/activity_labels.txt",
col.names = c("label", "activities"))
testX <- read.table("./UCI HAR Dataset/test/X_test.txt",
col.names = features$functions)
install.packages("swirl")
library(swirl)
library(httr)
library(dplyr)
library(jsonlite)
APILINK <- 'http://api.esportsearnings.com/v0/LookupGameById?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&gameid=151'
gamefeaturesGET <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
gamefeaturesGET
APILINK <- 'http://api.esportsearnings.com/v0/LookupHighestEarningPlayersByGame?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&gameid=151&offset=0'
topgameplayersGET <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
topgameplayersGET
for (i in 1:212) {
offset <- i*100
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupHighestEarningPlayersByGame?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&gameid=151&offset=", offset)
jsonplayers <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
topgameplayersGET <- rbind(topgameplayersGET, jsonplayers)
#I was getting an error because it was going to quick
#so I aded this to slow down
Sys.sleep(1)
}
getwd()
setwd("C:/Users/mcleod.c/OneDrive - University of Florida/Documents/R/Coursera Data Getting and Cleaning/Esportsdata/Undergraduate Research")
#this will write the file as a csv in the location
#you have selected
write.csv(topgameplayersGET, "allplayersStar2.csv")
library(lubridate)
DataREAD <- read.csv("allplayersStar2.csv", na.strings = "NA")
PlayerID <- DataREAD$PlayerId
playerIDs <- as.numeric(gsub('[$,]', '', PlayerID))
#Next, feed a vector of player ids
#to "playerID" the for loop should
#return a dataframe with player ids
#and then the earnings for each year
#Note: must clear the global environment
#for it to work. (use broom in environment tab
#on RStudio)
df <- data.frame(matrix(ncol = 25, nrow = 0))
for(i in 1:length(playerIDs)) {
#assigns the i player ID
playerID <- playerIDs[[i]]
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=0")
Sys.sleep(1)
jsonplayer <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
Sys.sleep(1)
#this subset uses if to figure out if
#there is more data left. If so it
#will collect another set of data
if(nrow(jsonplayer) == 100) {
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=100")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
if(nrow(jsonplayer) == 200) {
Sys.sleep(1)
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=200")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
if(nrow(jsonplayer) == 300) {
Sys.sleep(1)
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=300")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
Sys.sleep(1)
}}}
#turn date column into actual date
jsonplayer <- mutate(jsonplayer, EndDate = ymd(EndDate))
#might need to make prizes and exchange rate
#integers too
jsonplayer$Prize <- as.numeric(gsub('[$,]', '', jsonplayer$Prize))
jsonplayer$ExchangeRate <- as.numeric(gsub('[$,]', '', jsonplayer$ExchangeRate))
earnings <- mutate(jsonplayer, Earnings = Prize * ExchangeRate / TeamPlayers)
#be careful to change this to the correct GameId!
earnings <- filter(earnings, GameId == "151")
playerdata <- c()
playerdata <- append(playerdata, playerID)
for(i in 1:24) {
eYear <- i+1997
enddate <- paste0(eYear,"-12-31")
startdate <- paste0(eYear,"-01-01")
earningsyear <- filter(earnings, EndDate < enddate & EndDate > startdate)
if(nrow(earningsyear) > 0) {
yearearnings <- sum(earningsyear$Earnings)
playerdata <- append(playerdata, yearearnings, after = length(1+i))
} else {
playerdata <- append(playerdata, NA, after = length(1+i))
}
}
df <- rbind(df, playerdata)
}
x <- c("PlayerID", "X21", "X20", "X19", "X18",
"X17", "X16", "X15", "X14",
"X13", "X12", "X11", "X10",
"X09", "X08", "X07", "X06",
"X05", "X04", "X03", "X02",
"X01", "X00", "X99", "X98")
colnames(df) <- x
df
write.csv(df, "playerearningsStar1-70.csv")
DataREAD <- read.csv("allplayersStar2.csv", na.strings = "NA")
PlayerID <- DataREAD$PlayerId
PlayerID <- PlayerID[71:2115] #Must change this if repeating scrape due to interruption
playerIDs <- as.numeric(gsub('[$,]', '', PlayerID))
#Next, feed a vector of player ids
#to "playerID" the for loop should
#return a dataframe with player ids
#and then the earnings for each year
#Note: must clear the global environment
#for it to work. (use broom in environment tab
#on RStudio)
df <- data.frame(matrix(ncol = 25, nrow = 0))
for(i in 1:length(playerIDs)) {
#assigns the i player ID
playerID <- playerIDs[[i]]
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=0")
Sys.sleep(1)
jsonplayer <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
Sys.sleep(1)
#this subset uses if to figure out if
#there is more data left. If so it
#will collect another set of data
if(nrow(jsonplayer) == 100) {
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=100")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
if(nrow(jsonplayer) == 200) {
Sys.sleep(1)
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=200")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
if(nrow(jsonplayer) == 300) {
Sys.sleep(1)
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=300")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
Sys.sleep(1)
}}}
#turn date column into actual date
jsonplayer <- mutate(jsonplayer, EndDate = ymd(EndDate))
#might need to make prizes and exchange rate
#integers too
jsonplayer$Prize <- as.numeric(gsub('[$,]', '', jsonplayer$Prize))
jsonplayer$ExchangeRate <- as.numeric(gsub('[$,]', '', jsonplayer$ExchangeRate))
earnings <- mutate(jsonplayer, Earnings = Prize * ExchangeRate / TeamPlayers)
#be careful to change this to the correct GameId!
earnings <- filter(earnings, GameId == "151")
playerdata <- c()
playerdata <- append(playerdata, playerID)
for(i in 1:24) {
eYear <- i+1997
enddate <- paste0(eYear,"-12-31")
startdate <- paste0(eYear,"-01-01")
earningsyear <- filter(earnings, EndDate < enddate & EndDate > startdate)
if(nrow(earningsyear) > 0) {
yearearnings <- sum(earningsyear$Earnings)
playerdata <- append(playerdata, yearearnings, after = length(1+i))
} else {
playerdata <- append(playerdata, NA, after = length(1+i))
}
}
df <- rbind(df, playerdata)
}
DataREAD <- read.csv("allplayersStar2.csv", na.strings = "NA")
PlayerID <- DataREAD$PlayerId
PlayerID <- PlayerID[72:2115] #Must change this if repeating scrape due to interruption
playerIDs <- as.numeric(gsub('[$,]', '', PlayerID))
#Next, feed a vector of player ids
#to "playerID" the for loop should
#return a dataframe with player ids
#and then the earnings for each year
#Note: must clear the global environment
#for it to work. (use broom in environment tab
#on RStudio)
df <- data.frame(matrix(ncol = 25, nrow = 0))
for(i in 1:length(playerIDs)) {
#assigns the i player ID
playerID <- playerIDs[[i]]
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=0")
Sys.sleep(1)
jsonplayer <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
Sys.sleep(1)
#this subset uses if to figure out if
#there is more data left. If so it
#will collect another set of data
if(nrow(jsonplayer) == 100) {
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=100")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
if(nrow(jsonplayer) == 200) {
Sys.sleep(1)
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=200")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
if(nrow(jsonplayer) == 300) {
Sys.sleep(1)
APILINK <- paste0("http://api.esportsearnings.com/v0/LookupPlayerTournaments?apikey=b0e0da7e58c715f8618fbf2bb0f01920395531a048ccc4857274c6ccd7c157f9&playerid=", playerID,"&offset=300")
Sys.sleep(1)
jsonplayer2 <- APILINK %>%
httr::GET(config = httr::config(ssl_verifypeer = FALSE)) %>%
content(as = "text") %>%
fromJSON()
jsonplayer <- rbind(jsonplayer, jsonplayer2)
Sys.sleep(1)
}}}
#turn date column into actual date
jsonplayer <- mutate(jsonplayer, EndDate = ymd(EndDate))
#might need to make prizes and exchange rate
#integers too
jsonplayer$Prize <- as.numeric(gsub('[$,]', '', jsonplayer$Prize))
jsonplayer$ExchangeRate <- as.numeric(gsub('[$,]', '', jsonplayer$ExchangeRate))
earnings <- mutate(jsonplayer, Earnings = Prize * ExchangeRate / TeamPlayers)
#be careful to change this to the correct GameId!
earnings <- filter(earnings, GameId == "151")
playerdata <- c()
playerdata <- append(playerdata, playerID)
for(i in 1:24) {
eYear <- i+1997
enddate <- paste0(eYear,"-12-31")
startdate <- paste0(eYear,"-01-01")
earningsyear <- filter(earnings, EndDate < enddate & EndDate > startdate)
if(nrow(earningsyear) > 0) {
yearearnings <- sum(earningsyear$Earnings)
playerdata <- append(playerdata, yearearnings, after = length(1+i))
} else {
playerdata <- append(playerdata, NA, after = length(1+i))
}
}
df <- rbind(df, playerdata)
}
x <- c("PlayerID", "X21", "X20", "X19", "X18",
"X17", "X16", "X15", "X14",
"X13", "X12", "X11", "X10",
"X09", "X08", "X07", "X06",
"X05", "X04", "X03", "X02",
"X01", "X00", "X99", "X98")
colnames(df) <- x
72 + 2044
write.csv(df, "playerearningsStar72-2115.csv")
